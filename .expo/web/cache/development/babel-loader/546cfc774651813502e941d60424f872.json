{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nicolaseuliarte/Documents/Projects/imprv/components/main/Save.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    winWidth = _Dimensions$get.width,\n    winHeight = _Dimensions$get.height;\n\nexport default function Save(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var uploadImage = function uploadImage() {\n    var uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            childPath = \"post/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 7:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadURL: downloadURL,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: winWidth\n    },\n    source: {\n      uri: props.route.params.image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    style: {\n      color: \"white\",\n      fontSize: 17,\n      margin: 15,\n      padding: 10,\n      borderColor: \"grey\",\n      borderWidth: 1,\n      borderRadius: 20\n    },\n    placeholder: \"Caption...\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/nicolaseuliarte/Documents/Projects/imprv/components/main/Save.js"],"names":["React","useState","firebase","Dimensions","get","winWidth","width","winHeight","height","Save","props","caption","setCaption","uploadImage","uri","route","params","image","childPath","auth","currentUser","uid","Math","random","toString","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","console","log","bytesTransferred","taskCompleted","getDownloadURL","then","savePostData","taskError","on","downloadURL","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","navigation","popToTop","flex","color","fontSize","margin","padding","borderColor","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  View,\n  Image,\n  TextInput,\n  Button,\n  Dimensions,\n} from \"react-native\";\n\n// firebase db imports\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nconst { width: winWidth, height: winHeight } = Dimensions.get(\"window\");\nexport default function Save(props) {\n  // console.log(props.route.params.image)\n  // hooks\n  const [caption, setCaption] = useState(\"\");\n\n  // add to firebase\n  const uploadImage = async () => {\n    //get the image\n    const uri = props.route.params.image;\n    const childPath = `post/${\n      firebase.auth().currentUser.uid\n    }/${Math.random().toString(36)}`;\n\n    const response = await fetch(uri);\n    // uploads the image\n    const blob = await response.blob();\n\n    // task\n    const task = firebase.storage().ref().child(childPath).put(blob);\n\n    //check if upload finishes\n    const taskProgress = (snapshot) => {\n      console.log(`transferred: ${snapshot.bytesTransferred}`);\n    };\n\n    // completing the save\n    const taskCompleted = () => {\n      task.snapshot.ref.getDownloadURL().then((snapshot) => {\n        // create the post in firestore\n        savePostData(snapshot);\n        console.log(snapshot);\n      });\n    };\n\n    // error handler\n    const taskError = (snapshot) => {\n      console.log(snapshot);\n    };\n\n    //cave to db\n    task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n  };\n\n  // firestore save\n  const savePostData = (downloadURL) => {\n    firebase\n      .firestore()\n      .collection(\"posts\")\n      .doc(firebase.auth().currentUser.uid)\n      .collection(\"userPosts\")\n      .add({\n        downloadURL,\n        caption,\n        creation: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(function () {\n        // this sends to biggining route of the navigator\n        props.navigation.popToTop();\n      });\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Image\n        style={{ width: winWidth }}\n        source={{ uri: props.route.params.image }}\n      />\n      <TextInput\n        style={{ \n          color: \"white\", \n          fontSize: 17, \n          margin: 15, \n          padding: 10,\n          borderColor: \"grey\",\n          borderWidth: 1,\n          borderRadius: 20, }}\n        placeholder=\"Caption...\"\n        onChangeText={(caption) => setCaption(caption)}\n      />\n      <Button title=\"Save\" onPress={() => uploadImage()} />\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}